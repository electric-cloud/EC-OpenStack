// -*- Groovy -*-
// build.gradle
//
// Gradle build script for EC-OpenStack plugin.
//
// Copyright (c) 2015 Electric Cloud, Inc.
// All rights reserved

buildscript {
    repositories {
        mavenLocal()
        maven {
            url 'https://proxy.artifacts.cloudbees.com/repository/mirror'
            credentials {
                username = System.getenv('NEXUS_USERNAME') ?: nexusUsername
                password = System.getenv('NEXUS_PASSWORD') ?: nexusPassword
            }
        }
    }
    dependencies {
        classpath group: 'com.electriccloud.plugins', name: 'flow-gradle-plugin', version: '2.4'
    }
}

repositories {
    mavenLocal()
    maven {
        url 'https://proxy.artifacts.cloudbees.com/repository/mirror'
        credentials {
            username = System.getenv('NEXUS_USERNAME') ?: nexusUsername
            password = System.getenv('NEXUS_PASSWORD') ?: nexusPassword
        }
    }
}

configurations.all {
    resolutionStrategy {
        force group: 'com.electriccloud', name: 'ec-test', version: '10.1.0'
        force group: 'com.electriccloud', name: 'commander-client', version: '10.1.0'
        force group: 'com.electriccloud', name: 'commander-sdk', version: '6.1.2.1'
        force group: 'com.electriccloud', name: 'ec_internal', version: '6.1.2.1'
        force group: 'com.google.gwt', name: 'gwt-user', version: '2.5.0-ec3'
        force group: 'com.google.gwt', name: 'gwt-dev', version: '2.5.0-ec1'

        // force group: 'com.electriccloud', name: 'commander-client', version: '10.1.0'
        // force group: 'com.electriccloud', name: 'commander-sdk', version: '6.1.2.1'
        // force group: 'com.electriccloud', name: 'ec_internal', version: '6.1.2.1'
        // force group: 'com.google.gwt', name: 'gwt-user', version: '2.5.0-ec3'
        // force group: 'com.google.gwt', name: 'gwt-dev', version: '2.5.0-ec1'

        cacheChangingModulesFor 0, 'seconds'
    }
}

group = "com.electriccloud"
description = "Plugins : EC-OpenStack"
version = "1.4.0"

apply plugin: 'groovy'
apply plugin: 'flow-gradle-plugin'
apply plugin: 'license'

license {
    header = file ('shortHeader.txt')
    exclude "**/project.xml"
}

configurations {
    // Configuration for the jar files we want
    // to include in the plugin jar
    includeInPluginJar
}

dependencies {
    includeInPluginJar 'org.pacesys:openstack4j-core:2.0.5'
    includeInPluginJar 'org.pacesys.openstack4j.connectors:openstack4j-okhttp:2.0.5'
    testCompile 'junit:junit:[4,)'
    testCompile 'org.pacesys:openstack4j-core:2.0.5'
    testCompile 'org.pacesys.openstack4j.connectors:openstack4j-okhttp:2.0.5'
    testCompile group: "net.schmizz", name: "sshj", version: "0.8.1"
    testCompile group: "org.bouncycastle", name: "bcprov-jdk16", version: "1.46"
    testCompile "org.codehaus.groovy:groovy-all:2.3.8"
}

test {
    Properties props = new Properties()

    def propFileName = "ecplugin.properties"

    def propertyFile = new File( propFileName )

    if( propertyFile.exists() ) {
        props.load(new FileInputStream(propFileName))
    }

    systemProperties['COMMANDER_SERVER'] = "$commanderServer"
    systemProperties['COMMANDER_USER'] = props.getProperty("COMMANDER_USER")
    systemProperties['COMMANDER_PASSWORD'] = props.getProperty("COMMANDER_PASSWORD")
    systemProperties['OPENSTACK_USER'] = props.getProperty("OPENSTACK_USER")
    systemProperties['OPENSTACK_PASSWORD'] = props.getProperty("OPENSTACK_PASSWORD")
    systemProperties['OPENSTACK_TENANTID'] = props.getProperty("OPENSTACK_TENANTID")
    systemProperties['OPENSTACK_IDENTITY_URL'] = props.getProperty("OPENSTACK_IDENTITY_URL")
    systemProperties['PLUGIN_VERSION'] = version


 testLogging {
     // Show that tests are run in the command-line output
     events 'started', 'passed'
     exceptionFormat = 'full'
 }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

// Include any dependent jars in the plugin jar file for
// evaluating the validation and dynamic option scripts
// on the ElectricFlow server.
jar {
    from(configurations.includeInPluginJar, { into('libs') })
}

gwt {

    modules 'ecplugins.openstack.ConfigurationManagement'
}
